# ================================
# üîê Environment Variables
# ================================
import os
from dotenv import load_dotenv

load_dotenv()

API_BASE = os.getenv("BASE_API")

# ================================
# üì¶ Imports
# ================================
from modules.leds import *
from modules.switches import *
from modules.connection import *
import RPi.GPIO as GPIO                 # type: ignore
import multiprocessing
from time import sleep
import sys

# ================================
# ‚öôÔ∏è Background Function
# ================================
def outOfSyncSwitches():
    """
    Verifica continuamente se os switches f√≠sicos est√£o em sincronia com a API.
    Se n√£o estiverem, activa LED intermitente na posi√ß√£o desincronizada.
    """
    while True:
        sleep(2)
        try:
            diffs = syncSwitchesWithAPI()
            for pos, result in diffs.items():
                if result:  # Houve toggle ‚Üí estava fora de sincronia
                    warnOccupiedPos(pos)
        except Exception as e:
            print(f"[Erro no processo de fundo] {e}")

# ================================
# ‚≠ê Main code
# ================================
if __name__ == "__main__":
    try:
        startUpLEDS()
        print("[Sistema iniciado]")

        # Processo de verifica√ß√£o de sincroniza√ß√£o
        outOfSyncProcess = multiprocessing.Process(target=outOfSyncSwitches, daemon=True)
        outOfSyncProcess.start()

        while True:
            # 1Ô∏è‚É£ Ler c√≥digo de barras
            id_input = input("\n[Leitura] Introduz o c√≥digo de barras da pe√ßa (ou 'sair'): ").strip()
            if id_input.lower() == "sair":
                break

            # 2Ô∏è‚É£ Obter posi√ß√£o correcta via API
            pos = getPos(id_input)
            if isinstance(pos, str):
                print(f"[Erro] {pos}")
                continue
            try:
                pos = int(pos)
            except ValueError:
                print("[Erro] Resposta inv√°lida da API.")
                continue

            if not (1 <= pos <= 12):
                print(f"[Erro] Posi√ß√£o inv√°lida devolvida pela API: {pos}")
                continue

            print(f"[Info] Coloca a pe√ßa na posi√ß√£o {pos}.")
            indicateRightPos(pos)

            # 3Ô∏è‚É£ Esperar mudan√ßa de estado nos switches
            prev_states = getSwitches()
            while True:
                sleep(0.2)
                changed = compareSwitches(prev_states)
                if not didntChange(changed):
                    break
            current_states = getSwitches()

            # 4Ô∏è‚É£ Verificar se o switch certo foi activado
            occupied_map = update_positions()
            if occupied_map.get(pos):
                # ‚úÖ Colocado na posi√ß√£o certa
                print("[Sucesso] Pe√ßa colocada no local correcto!")
                rightPos(pos)
                continue

            # ‚ùå Colocada na posi√ß√£o errada
            wrong_pos = None
            for p, occupied in occupied_map.items():
                if occupied:
                    wrong_pos = p
                    break

            if wrong_pos is not None:
                print(f"[Aviso] Pe√ßa colocada no local errado: {wrong_pos}")
                warnWrongPos(pos, wrong_pos)

                # 5Ô∏è‚É£ Esperar que a pe√ßa errada seja retirada
                while True:
                    sleep(0.5)
                    occupied_map = update_positions()
                    if not occupied_map.get(wrong_pos):
                        print("[Info] Pe√ßa removida da posi√ß√£o errada. Retoma o processo.")
                        break

            # Volta ao in√≠cio do loop principal

    except KeyboardInterrupt:
        print("\n[Encerramento manual]")
    finally:
        ledsOff()
        cleanup()
        print("[Sistema desligado com seguran√ßa]")
